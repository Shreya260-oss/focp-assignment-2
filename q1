#include <iostream>
#include <vector>
using namespace std;

class Student {
private:
    int rollno, age;
    string name;

public:
    Student(int stdRollno, string stdName, int stdAge) {
        rollno = stdRollno;
        name = stdName;
        age = stdAge;
    }

    void setRollno(int stdRollno) {
        rollno = stdRollno;
    }

    int getRollno() const {
        return rollno;
    }

    void setName(string stdName) {
        name = stdName;
    }

    string getName() const {
        return name;
    }

    void setAge(int stdAge) {
        age = stdAge;
    }

    int getAge() const {
        return age;
    }

    void displayStudent() const {
        cout << "Roll No: " << rollno << endl;
        cout << "Name: " << name << endl;
        cout << "Age: " << age << endl;
    }
};

// Function to add a new student
void addNewStudent(vector<Student> &students) {
    int rollno, age;
    string name;

    cout << "Enter Roll No: ";
    cin >> rollno;

    for (const Student &s : students) {
        if (s.getRollno() == rollno) {
            cout << "\t\tStudent Already Exists" << endl;
            return;
        }
    }

    cout << "Enter Name: ";
    cin.ignore(); // clear newline before getline
    getline(cin, name);

    cout << "Enter Age: ";
    cin >> age;

    Student newStudent(rollno, name, age);
    students.push_back(newStudent);
    cout << "\t\tStudent Added Successfully!" << endl;
}

// Function to display all students
void displayAllStudents(const vector<Student> &students) {
    if (students.empty()) {
        cout << "\t\tNo student found" << endl;
        return;
    }
    for (const Student &s : students) {
        s.displayStudent();
        cout << "---------------------" << endl;
    }
}

// Function to search for a student
void searchStudent(const vector<Student> &students) {
    int rollno;
    cout << "\t\tEnter Roll No: ";
    cin >> rollno;

    for (const Student &s : students) {
        if (s.getRollno() == rollno) {
            cout << "\t\t------------- Student Found --------------" << endl;
            s.displayStudent();
            return;
        }
    }
    cout << "\t\tStudent Not Found" << endl;
}

int main() {
    vector<Student> students;
    students.push_back(Student(1, "Lisa Smith", 20)); // sample data

    char choice;
    do {
        int op;
        cout << "\n\t\t-----------------------------------" << endl;
        cout << "\t\tStudent Management System" << endl;
        cout << "\t\t-----------------------------------" << endl;
        cout << "\t\t1. Add New Student" << endl;
        cout << "\t\t2. Display All Students" << endl;
        cout << "\t\t3. Search Student" << endl;
        cout << "\t\t4. Exit" << endl;
        cout << "\t\tEnter Your Choice: ";
        cin >> op;

        switch (op) {
            case 1:
                addNewStudent(students);
                break;
            case 2:
                displayAllStudents(students);
                break;
            case 3:
                searchStudent(students);
                break;
            case 4:
                cout << "\t\tExiting Program..." << endl;
                return 0;
            default:
                cout << "\t\tInvalid Choice. Try again." << endl;
        }

        cout << "\t\tDo You Want to Continue [Y/N]? : ";
        cin >> choice;

    } while (choice == 'y' || choice == 'Y');

    return 0;
}
 
     
    
